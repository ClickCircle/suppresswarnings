/**
 * 
 *       # # $
 *       #   #
 *       # # #
 * 
 *  SuppressWarnings
 * 
 */
package com.suppresswarnings.things;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.UnsupportedEncodingException;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.net.Socket;
import java.net.UnknownHostException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.nio.file.StandardOpenOption;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Properties;

import javax.net.SocketFactory;
import javax.net.ssl.SSLSocketFactory;

public class ThingsManager {
	
	public static final int retry = 3;
	public static String execute(Things things, Map<String, Method> cmds, String call, String msg) {
		Method method = cmds.get(call);
		if(method == null) {
			return "notfound";
		} else {
			try {
				Object object = method.invoke(things, msg);
				return String.valueOf(object);
			} catch (IllegalAccessException e) {
				e.printStackTrace();
			} catch (IllegalArgumentException e) {
				e.printStackTrace();
			} catch (InvocationTargetException e) {
				e.printStackTrace();
			}
		}
		return "error";
	}
	public static void connect(Things things, String configPath) {
		String error = "";
		Map<String, Method> cmds = new HashMap<>();
		Method[] methods = things.getClass().getDeclaredMethods();
		List<String> commands = new ArrayList<>();
		for(Method method : methods) {
			SuppressWarnings cmd = method.getDeclaredAnnotation(SuppressWarnings.class);
			if(cmd == null) continue;
			String command = cmd.value();
			commands.add(command);
			cmds.put(command, method);
		}
		Prepare prepare = new Prepare();
		try {
			Properties config = new Properties();
			if(configPath != null) config.load(new FileInputStream(configPath));
			System.out.println(config.toString());
			String server = config.getProperty("server.ssl.host", "139.199.104.224");
			String sslPorts = config.getProperty("aiiot.ssl.port", "6617");
			String code = config.getProperty("thing.code", things.code()); 
			int sslPort = Integer.parseInt(sslPorts);
			String debug = config.getProperty("debug");
			if("true".equals(debug)) System.setProperty("javax.net.debug", "ssl,handshake");
			System.setProperty("javax.net.ssl.keyStore", prepare.keyDir);
			System.setProperty("javax.net.ssl.trustStore", prepare.trustDir);
			System.setProperty("javax.net.ssl.keyStorePassword", prepare.keyPwd);    
			System.setProperty("javax.net.ssl.trustStorePassword",prepare.trustPwd);
			int tried = 0;
			while(tried ++ < retry) {
				SocketFactory factory = SSLSocketFactory.getDefault();    
				Socket sslsocket = factory.createSocket(server, sslPort);
				String knock = String.join(",", things.description(), code, String.join(";", commands)) + "\n";
				System.out.println("knock ======== " + knock);
				BufferedWriter out = new BufferedWriter(new OutputStreamWriter(sslsocket.getOutputStream(),"UTF-8"));    
				out.write(knock);
				out.flush();
				InputStream is = sslsocket.getInputStream();
				InputStreamReader reader = new InputStreamReader(is,"UTF-8");
				System.out.println("Connected!");
				
				//TODO pull & show QRCode?
				
				while(sslsocket.isConnected() && !sslsocket.isClosed()) {
				    try {
						BufferedReader in = new BufferedReader(reader);
						String msg = in.readLine();
						System.out.println("msg ========= " + msg);
						String call = msg.trim();
						String ret = execute(things, cmds, call, msg);
						System.out.println("ret ========= " + ret);
						out.write(ret + "\n");
						out.flush();
					} catch (Exception e) {
						sslsocket.close();
						e.printStackTrace();
						System.out.println(e.getMessage() + "网络异常，准备重试 第" + tried + "次");
					}
				}
			}
		} catch (NumberFormatException e) {
			e.printStackTrace();
			error += e.getMessage();
		} catch (FileNotFoundException e) {
			e.printStackTrace();
			error += e.getMessage();
		} catch (UnknownHostException e) {
			e.printStackTrace();
			error += e.getMessage();
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			error += e.getMessage();
		} catch (IOException e) {
			e.printStackTrace();
			error += e.getMessage();
		}
		System.out.println(error + ", 程序退出");
	}
	
	public static class Prepare {
		byte[] b0 = {48,-126,14,-77,2,1,3,48,-126,14,108,6,9,42,-122,72,-122,-9,13,1,7,1,-96,-126,14,93,4,-126,14,89,48,-126,14,85,48,-126,3,9,6,9,42,-122,72,-122,-9,13,1,7,1,-96,-126,2,-6,4,-126,2,-10,48,-126,2,-14,48,-126,2,-18,6,11,42,-122,72,-122,-9,13,1,12,10,1,2,-96,-126,2,-101,48,-126,2,-105,48,41,6,10,42,-122,72,-122,-9,13,1,12,1,3,48,27,4,20,-55,68,-88,-25,-27,-30,2,-35,-56,82,119,-26,-64,-16,-15,57,25,-33,51,-128,2,3,0,-61,80,4,-126,2,104,-14,-85,95,104,-8,95,-86,-122,15,-12,106,-124,-78,-90,-52,-101,49,34,30,55,-62,109,-111,-75,-85,12,-67,35,11,-59,-48,-37,-36,17,-65,-9,95,15,68,-85,-66,-124,112,-97,-42,106,70,117,114,24,-105,97,-38,65,-109,70,40,72,113,119,110,-49,-20,-6,-48,-20,92,68,85,10,-87,121,-37,-55,-71,-42,98,-42,-45,-43,-96,-69,-127,-14,-113,-32,-30,-127,104,78,-78,-117,93,-116,100,-127,-96,127,44,40,99,61,-101,-124,-34,-7,-40,-55,-10,-85,-24,-26,-35,-101,-58,95,-47,114,-37,101,-47,-98,114,61,89,-34,57,-44,29,63,-36,-35,3,-11,-62,8,118,26,-68,88,105,-127,37,-91,-55,43,5,75,-95,6,-70,32,79,-103,-28,-56,-4,104,-92,-41,56,101,-15,-59,5,109,114,-65,-61,2,-91,-66,-101,7,67,39,-88,36,-16,-71,-56,43,60,59,14,-65,-29,48,89,-49,-30,33,-89,-94,14,-104,127,51,-65,-6,53,-28,-12,113,46,-111,112,-80,5,108,-5,30,-22,84,-8,-98,11,-120,-33,107,-91,-43,39,78,-2,4,-86,-62,-14,-32,-5,-50,-33,-88,23,-113,-89,-86,0,6,-41,-126,-32,-25,-90,106,-2,-18,-105,-82,69,46,-62,-52,-33,45,117,125,-38,-52,20,-5,96,-112,-8,-87,61,47,-51,16,-87,118,-97,-79,11,-38,-92,3,51,-87,115,-11,-62,44,54,-66,-25,-124,70,-92,-64,44,124,-47,63,75,-45,104,-52,82,-21,35,3,30,-74,-127,38,2,63,-1,-22,122,29,-104,100,-110,-106,92,-70,33,56,-123,93,16,117,52,-86,-14,-103,-108,-103,-40,8,-38,-118,103,15,79,67,-112,120,-49,-77,60,-125,106,-46,-47,45,-57,-3,117,56,-69,27,48,102,124,83,13,-121,-77,91,15,52,-80,3,126,-59,112,114,4,39,-120,-101,-37,-78,-82,42,-102,84,-98,92,-94,-94,-97,92,-109,-102,89,-127,108,-119,12,115,35,-26,53,-97,24,-125,-103,-45,-28,-9,95,25,-16,-3,40,50,-34,92,-98,66,104,127,-11,71,52,-18,66,111,78,91,32,-89,-62,13,-31,52,55,-42,-80,-23,-9,-111,57,-47,67,9,-60,32,-39,-61,78,-64,10,125,67,-57,118,2,0,112,27,44,41,-126,-43,-50,-109,-23,-23,22,-13,97,23,47,46,22,121,46,62,-95,-33,98,-109,30,-6,95,32,-30,-74,-1,-71,-5,-108,116,47,-31,-19,49,-112,-92,-34,-93,30,100,112,-125,-21,35,-37,48,82,-119,-96,58,58,-120,1,22,41,39,-44,27,-97,-38,-2,-24,17,120,48,20,-10,56,115,93,96,33,99,-25,55,-6,-102,-14,-72,-78,-113,-112,121,60,-72,-103,-33,-87,-80,41,63,-108,-49,19,-79,-83,26,-84,-121,-98,0,-116,-27,25,-10,-45,-111,-15,85,-81,-121,21,58,43,-51,-96,-66,-94,-112,111,-48,46,68,-108,12,5,-6,36,-12,31,3,-49,14,-94,-102,92,92,23,-125,34,-108,-36,90,-27,61,-19,-38,96,0,34,-70,-99,-49,120,-45,-118,-55,49,64,48,27,6,9,42,-122,72,-122,-9,13,1,9,20,49,14,30,12,0,121,0,105,0,110,0,103,0,122,0,105,48,33,6,9,42,-122,72,-122,-9,13,1,9,21,49,20,4,18,84,105,109,101,32,49,53,53,48,48,52,50,52,57,51,53,52,54,48,-126,11,68,6,9,42,-122,72,-122,-9,13,1,7,6,-96,-126,11,53,48,-126,11,49,2,1,0,48,-126,11,42,6,9,42,-122,72,-122,-9,13,1,7,1,48,41,6,10,42,-122,72,-122,-9,13,1,12,1,6,48,27,4,20,118,110,89,-52,-29,-10,-1,-33,-2,-103,-124,0,115,-7,13,90,-6,26,11,-123,2,3,0,-61,80,-128,-126,10,-16,-29,-18,84,-96,-34,-65,47,55,-82,-121,-104,-119,72,-30,4,4,14,10,67,60,121,95,63,57,102,-70,117,-86,115,33,73,-56,85,-29,-34,-1,-102,53,104,111,109,-79,-24,-37,17,-55,-5,-64,-64,-34,-99,8,-21,43,-43,-49,22,24,-14,108,-24,-93,-121,10,94,124,111,12,92,-41,42,2,65,-43,50,-115,-102,126,-5,-94,-90,-26,-99,76,126,57,-23,53,-74,-87,88,-115,-45,106,93,-81,-69};
		byte[] b1 = {-116,-28,-4,-96,44,-53,-50,72,33,16,5,24,-99,71,119,74,106,23,-13,94,96,66,113,8,96,108,-99,61,-100,-128,10,-50,-115,25,32,8,-126,-16,-30,57,-122,112,-119,-86,-119,80,73,127,52,-102,-93,72,-69,-43,95,-52,64,-40,-47,-35,-22,105,-70,-117,7,17,32,-52,-37,-113,80,72,29,-56,-20,119,-39,-94,-4,127,110,-115,16,4,-80,-97,23,38,10,-49,-43,82,-5,92,37,91,3,-109,-2,80,36,-45,-78,-97,-12,29,97,32,-63,91,-79,-94,-54,-125,-48,-80,-120,-28,-79,-94,-39,-76,109,64,-50,99,66,91,14,91,83,28,37,-98,-60,-100,-90,127,68,91,106,-52,-113,-60,-126,-123,46,-34,-26,-122,-33,27,103,52,-52,36,-21,-76,-51,127,35,-43,117,101,-111,14,-67,91,56,39,-100,-92,-26,-44,-82,88,-109,-57,120,96,-65,7,81,110,-127,37,-68,-22,-110,-92,-85,103,-103,-11,-37,17,48,-28,43,4,2,21,-112,-55,106,-2,-7,-1,107,-101,-17,52,90,-37,78,-26,-125,92,112,-48,-76,-30,-126,11,109,-57,-4,-75,3,-83,-29,-15,80,-128,-43,24,-38,2,69,72,-10,34,50,52,8,96,-41,28,113,-74,6,-18,-93,-91,59,23,-117,-24,80,-61,98,-55,-44,-32,122,-17,-31,100,82,-118,114,4,-3,41,124,52,-36,-31,119,81,-38,-113,-78,-79,-114,-2,18,11,-7,-114,-31,-43,-43,55,120,-22,-67,45,72,17,-59,126,-70,111,-71,-34,-86,-19,-49,122,111,86,57,102,-114,-105,-86,-20,50,45,63,-98,87,-99,-79,35,24,90,-27,94,-117,112,-86,-34,-48,57,98,-102,115,30,-113,-100,-11,-57,-87,-14,126,-31,-111,-119,-64,-32,-68,-126,-75,22,-51,83,-114,6,-7,1,-95,96,42,54,65,-97,51,-64,-106,-55,46,-73,-113,-104,-44,-7,120,56,62,7,-112,86,-82,-17,111,-36,-116,-92,121,-70,95,-71,-88,-75,-64,-35,-96,12,-115,27,24,-58,91,-18,-78,112,52,-105,118,66,44,38,-95,112,-62,-61,-127,35,-109,-49,-126,-122,79,-23,-110,109,-63,19,11,17,-49,75,-35,-55,-105,-52,-114,82,-91,75,-106,57,-11,80,-68,-6,-16,73,-50,-103,-35,-10,103,46,65,-88,10,109,52,28,30,-65,74,6,94,77,-87,-125,-91,-40,105,-85,49,92,0,-6,-80,-91,-35,-35,70,-86,-22,115,0,120,89,40,-66,122,-51,-18,57,-1,12,-49,57,50,-125,-3,-91,-19,-99,99,48,-57,-95,-16,127,-117,79,86,-117,86,-8,-113,-121,-127,116,78,-24,-128,-127,-68,-65,-54,63,112,72,-96,47,0,28,-84,-9,-42,-24,26,-59,2,-72,-29,49,29,15,45,10,-90,9,83,101,125,-68,68,116,57,-99,-78,-91,-31,-46,-60,-90,122,27,18,-82,-121,-66,-106,8,-72,-10,-105,-91,-124,-95,96,48,-9,105,47,97,-89,-4,-104,-64,-82,-123,48,-111,6,-40,-61,65,100,-108,-20,-3,116,41,2,-72,104,-56,42,43,-62,-53,-111,4,14,-11,-43,-112,63,114,-86,-27,15,110,-27,55,-45,16,-78,127,66,85,-17,24,-80,88,-123,121,49,80,31,-30,108,-96,-60,25,-102,-99,118,-18,-36,-83,-41,121,25,29,-14,123,15,17,88,112,-47,16,-112,-13,-99,61,6,84,-66,-122,-67,44,56,78,4,-128,26,36,52,-19,-106,14,65,-49,-88,-21,55,89,-91,-104,83,114,78,121,105,19,-91,-22,94,-104,-89,53,62,55,83,-29,-13,-55,5,113,72,-54,-60,-126,118,3,106,-120,-57,-50,-8,-26,21,100,-59,-70,88,22,30,53,97,96,-65,-122,26,100,76,-100,41,85,31,-33,6,20,73,-90,0,110,86,-16,58,113,78,-19,-40,34,-118,-46,-102,119,-102,104,43,100,49,104,-99,115,35,76,29,58,-116,6,14,64,0,-66,69,74,-99,-1,32,91,5,51,124,-92,-127,-68,5,-11,84,34,-11,-47,-17,-30,-79,-99,-124,-2,52,82,-11,108,-61,-24,-128,-67,-14,-70,-91,-22,125,46,6,-99,-101,-119,-92,-26,5,30,109,-71,125,-66,25,65,11,-69,87,-106,-10,-19,-73,13,16,64,73,-120,17,31,71,-120,115,15,99,-13,10,-127,-126,23,57,-73,35,-15,-98,-83,29,-17,-94,-2,-79,-127,65,-76,41,-115,-81,66,21,-104,-126,-22,-37,54,-34,-95,69,-34,84,-62,102,-46,118,70,-74,84,-94,21,13,103,93,-90,-81,-79,30,29,-87,-75,-99,-125,63,105,23,22,66,-73,95,105,119,-59,87,25,122,-44,113,21,93,84,-23,-126,14,-4,2,47,34,36,-80,64,-31,-69,87,69,32,-107,121,-121,-46,50,-3,-79,100,-98,-3,43,-114,19,-119,-76,58,-80,123,-81,-9,-45,27,-43,5,-50,48,-118,119,-4,18,-100,-68,-23,-52,-92,94,24,80,59,11,-75,43,123,-8,87,-21,-86,12,53,-118,8,-127,-12,27,-6,109,100,-34,-52,-50,-13,-100};
		byte[] b2 = {-78,-61,11,105,-80,-42,124,3,-26,43,-118,-29,-2,43,-115,-101,-94,-82,123,-88,14,124,20,-32,-2,76,125,46,45,-25,59,-93,40,97,121,81,-121,-23,51,-38,18,-103,125,3,27,-60,93,-78,-68,-43,-101,-49,5,-123,-46,-26,70,-65,51,80,-109,21,-67,-63,-121,52,16,-19,-104,-44,81,37,-126,-109,-84,-83,94,-99,-79,12,-82,-88,-10,94,-128,-67,-79,-79,-18,15,-54,-7,86,127,-67,-53,-36,-116,47,-11,-43,98,55,23,30,44,20,-1,-77,27,-16,-44,-51,25,-105,-44,86,-110,-36,-67,-52,37,-68,76,-107,-79,-14,94,91,105,-113,-35,-95,-72,116,-101,-53,30,-93,38,47,-50,84,-75,-71,-48,25,-51,-80,-82,87,-44,-21,81,-59,-50,5,-111,-47,21,75,56,-83,-121,-98,-119,37,-38,89,-66,80,-42,120,-19,-71,-59,-27,61,-37,111,46,104,100,-127,15,28,37,-80,116,43,-115,-105,-20,99,-35,90,13,-38,46,12,-78,25,-15,-83,-116,-98,20,109,-11,77,-60,-61,44,31,34,44,64,-37,88,-19,48,-13,-46,-2,91,66,0,-55,-80,-100,91,-9,-91,69,100,-75,106,-70,-53,9,-89,31,26,-62,4,-9,-40,-17,-120,-94,-46,77,92,-80,125,58,13,-12,23,118,93,77,84,106,-76,-115,-113,-73,-28,-7,-35,15,-102,-102,43,65,-118,36,71,19,-30,93,-39,-71,94,-48,57,-87,-74,44,81,84,-49,106,18,-70,92,-50,5,-108,-14,-56,36,-32,-114,58,103,101,-51,-25,52,-56,-94,34,-124,-15,-42,83,-13,-56,-9,-27,-86,-29,-89,39,56,4,109,56,-106,-123,10,-14,-35,-62,-59,105,-69,110,-81,27,105,-58,49,-38,91,21,125,-112,18,81,-13,-103,-113,72,-99,8,-52,98,105,-16,-22,58,10,-115,-58,-74,101,111,41,-85,87,-4,127,-3,-102,-47,120,101,3,-60,-31,-10,88,81,36,-76,21,18,123,25,33,35,-74,-104,100,39,35,-104,-90,-15,14,-107,-124,-35,-91,-88,-89,34,4,-118,-8,-18,72,-22,-106,8,118,95,41,80,28,-115,-65,-48,-78,-62,112,-90,-81,-67,-112,-61,-83,-31,-41,23,-27,6,98,-36,-71,18,-85,55,68,17,-10,15,103,104,49,-113,117,115,-53,65,-101,-99,-58,-14,-52,-102,109,-94,-89,-79,-97,20,41,21,-121,66,15,67,-76,80,-33,-73,114,-53,-94,-46,71,36,106,-7,9,87,-49,27,124,10,-27,-90,-99,32,20,92,14,-31,-33,-79,11,101,-127,118,-79,61,-51,37,121,-64,102,-113,-91,44,59,-93,107,7,-8,0,-127,41,113,-117,-86,83,114,-2,-18,-35,-82,-91,16,84,-27,-18,-23,-62,-76,121,73,31,-89,-89,-5,-85,15,-46,-96,-5,39,17,-43,109,101,-44,83,72,-108,71,80,-35,54,43,8,31,11,25,94,123,108,-99,69,-47,73,-44,126,-124,99,-38,-3,82,39,23,-78,80,-74,4,-71,91,117,-102,88,-9,100,-3,-101,-104,120,-30,-109,-47,-49,-53,38,106,57,-43,65,-43,-91,118,-76,-44,72,39,-49,-81,-121,38,44,69,-120,-81,124,-9,-45,55,93,-8,0,107,-12,36,78,-107,-63,8,18,-29,-49,119,-67,93,-45,16,-43,-17,-17,-85,-109,-49,119,55,-91,-43,-54,-8,-69,-119,-36,-41,-73,-23,-127,-73,32,-95,41,68,11,-110,48,94,-74,27,-38,51,-63,-105,-117,-63,-59,5,8,112,66,68,82,41,-71,109,43,118,67,-45,-78,11,125,92,68,-21,-13,-91,-16,-45,15,31,82,90,81,32,24,123,-104,-72,104,42,50,74,51,79,27,-91,-114,60,-120,59,-17,-48,-114,-96,83,-108,-14,71,-5,37,26,94,-52,21,6,30,-116,89,-47,-91,-117,50,22,58,47,89,80,-104,-114,122,56,-81,-105,-24,15,79,-62,83,57,98,-124,106,80,42,101,-65,-4,92,49,-14,-79,25,87,125,-79,-66,19,-118,21,30,-48,95,90,52,126,-124,-120,-123,120,58,-7,19,31,-24,-57,-40,72,81,78,15,24,-70,-125,47,-125,-13,-66,-41,-15,-70,21,-36,-41,62,-49,-83,-92,27,34,73,43,107,-24,-89,-17,76,-107,-96,92,-26,-5,-120,86,-5,-104,-107,127,10,-88,-50,71,77,-106,35,-85,96,123,46,-38,122,115,-58,20,118,-53,-40,25,99,-107,-116,64,-54,-111,109,43,-91,-70,-53,-96,-66,78,-82,-101,80,-20,-100,-63,-85,42,-17,-22,-108,-113,85,67,33,-27,68,97,116,29,-17,-20,23,-59,78,-70,21,-53,-52,62,59,-27,65,-21,-33,42,-90,-93,106,4,-30,118,79,-76,108,95,-85,14,-40,72,13,-110,-22,-78,88,-51,87,-35,-100,-92,76,108,103,26,98,120,20,58,-28,-55,-101,-127,85,-57,-55,127,-98,-58,-107,-50,-104,13,99,74,105,-24,112,88,-78,-24,-90,23,77,65,33,-61,-36,16,101,-66,-28,-108,39,-99,-17,-68,105,-122,-100,16,122,-120,-96,1,-113,24,-64};
		byte[] b3 = {2,98,-31,71,-71,-49,123,108,-86,64,10,-110,41,-48,95,29,-14,-88,-1,-74,54,127,73,7,28,-46,-126,-11,-120,-50,87,20,-34,125,-15,-105,75,-117,-83,-55,-46,40,-125,5,75,-85,7,-49,113,-31,-116,-99,-105,120,10,111,-52,-108,95,-53,105,-121,-68,-89,-35,-85,48,49,53,87,85,99,92,37,-5,33,-70,-29,35,-104,-126,-16,120,-106,83,10,-77,15,65,70,27,25,115,59,-21,59,83,-95,-41,49,100,-39,37,54,-105,59,-108,75,-116,-104,38,47,98,31,122,-127,-93,0,-92,28,25,49,-25,-123,114,99,-75,66,60,7,-25,18,-90,36,-92,9,68,-57,79,1,4,56,-90,-26,117,-120,-90,73,-125,-120,56,87,100,-13,-24,-59,79,-56,8,67,-15,113,-99,74,-71,71,79,-89,-68,124,-79,-58,-64,-100,-89,45,-19,88,-64,-38,31,-64,-29,80,-3,8,-42,-3,63,-114,-25,-40,-58,69,25,-64,-67,118,31,-82,-93,125,115,-65,-127,-64,105,101,67,-114,91,94,-50,-2,-101,-82,-51,-35,81,-63,9,118,-93,60,95,-42,89,20,-8,-33,90,15,-14,-34,-5,106,-13,127,79,7,82,11,-83,-11,-93,4,101,40,-81,123,38,103,75,95,86,-39,76,-36,-41,96,52,19,65,109,19,89,96,126,-108,-96,72,117,-60,-63,12,-124,-49,-91,-106,-24,16,-71,11,106,-122,23,-116,-64,93,24,-108,-114,76,-102,-6,5,-57,58,-55,3,60,65,86,-60,-12,10,106,-112,-117,-123,-8,53,-21,-72,-57,-38,65,-16,-101,-73,12,-72,104,-27,-128,-53,19,83,-74,-127,-81,82,19,0,-78,-17,92,77,116,-76,-110,64,-99,-81,102,-35,-18,-89,82,12,126,51,-73,-97,32,-66,-44,51,-16,-120,-22,69,-65,-22,97,77,50,-94,112,75,-120,-62,-63,-96,74,-13,79,-58,9,-107,114,95,98,106,-6,73,75,47,12,23,46,-15,17,-33,3,34,86,110,-30,-15,54,1,30,-100,-24,-56,-98,-67,-117,-105,-57,84,109,-64,110,94,-66,95,74,60,32,56,-124,60,-28,47,-88,-92,-15,-107,-50,-30,-104,68,38,96,-94,-80,-7,-119,-80,-121,-44,-95,65,55,-4,92,-109,103,-3,-9,-113,53,-37,19,-19,91,110,99,5,-61,-124,51,53,-27,-55,-118,8,59,38,55,30,70,14,100,-86,-68,-106,94,92,-117,-76,-48,-96,125,-20,-99,38,73,-85,38,23,7,-90,-66,0,-36,106,99,59,19,59,119,-13,-110,108,115,71,17,124,-6,-49,43,105,-63,-47,69,-109,54,70,114,88,26,100,-124,-54,-120,-86,105,34,14,114,115,-60,-13,75,24,-11,100,88,-29,-112,84,63,11,126,116,-100,-49,-24,-21,-43,-109,50,101,112,117,10,-19,79,-5,87,-124,14,17,98,-8,106,-45,75,61,-21,90,90,34,-61,83,-4,-65,51,-79,-111,-34,42,33,-13,-61,-105,95,-1,75,-43,120,93,-1,-88,-50,39,85,-84,-5,91,-128,59,-7,-71,-101,1,-88,24,-41,121,26,39,-54,63,47,-40,-111,24,-99,105,-125,37,-124,-99,121,109,62,-6,88,-18,-63,-78,19,-91,7,73,-92,-119,16,67,10,117,66,-6,92,-1,114,-107,-43,-49,-64,-52,-48,-33,-127,-91,0,79,-41,-89,-31,-99,-99,48,-68,59,89,82,-103,117,-71,74,-12,-77,-113,-120,1,20,-87,-5,11,8,-69,103,-126,115,-84,-119,74,-90,77,0,-44,-87,47,-86,-114,-88,90,94,48,62,48,33,48,9,6,5,43,14,3,2,26,5,0,4,20,62,13,97,-63,-24,102,12,100,111,0,42,71,-56,40,-86,-114,63,25,32,1,4,20,-69,126,100,16,87,122,-80,-110,52,48,-11,33,-68,-23,-117,54,-102,4,-20,19,2,3,1,-122,-96};
		byte[][] bs = {b1,b2,b3};
		byte[] p0 = {b0[268], b0[38], b0[341], b0[872], b0[499], b0[131], b0[644], b0[778]};
		String tmpDir = System.getProperty("java.io.tmpdir");
		String keyDir;
		String trustDir;
		String keyPwd;
		String trustPwd;
		public Prepare() {
			File tmpFile = new File(tmpDir, "things."+System.currentTimeMillis()+".jks");
			try {
				Files.write(Paths.get(tmpFile.getAbsolutePath()), b0, StandardOpenOption.CREATE_NEW);
				for(byte[] b : bs) Files.write(Paths.get(tmpFile.getAbsolutePath()), b, StandardOpenOption.APPEND);
				tmpFile.deleteOnExit();
			} catch (Exception e) {
				e.printStackTrace();
			}
			keyDir = tmpFile.getAbsolutePath();
			trustDir = keyDir;
			keyPwd = join(p0);
			trustPwd = keyPwd;
		}
		
		private String join(byte[] bytes) {
			StringBuffer sb = new StringBuffer();
			for(byte b : bytes) {
				sb.append(b);
			}
			return sb.toString();
		}
		
		@Override
		public String toString() {
			return "Prepare [tmpDir=" + tmpDir + ", keyDir=" + keyDir + ", trustDir=" + trustDir + ", keyPwd=" + "**** , trustPwd=" + "**** ]";
		}
	}
}
